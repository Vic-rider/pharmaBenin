{"version":3,"sources":["webpack:///src/app/components/core/models/user.ts","webpack:///src/app/components/core/services/snackbar.service.ts","webpack:///src/app/components/pages/auth/auth.component.ts","webpack:///src/app/components/pages/auth/auth.component.html","webpack:///src/app/components/pages/auth/auth.module.ts","webpack:///src/app/components/pages/auth/forgot-password/forgot-password.component.ts","webpack:///src/app/components/pages/auth/forgot-password/forgot-password.component.html","webpack:///src/app/components/pages/auth/login/login.component.ts","webpack:///src/app/components/pages/auth/login/login.component.html","webpack:///src/app/components/pages/auth/register/register.component.ts","webpack:///src/app/components/pages/auth/register/register.component.html"],"names":["User","SnackbarService","_snackBar","snack_class","success","warn","danger","msg","closeMsg","duration","open","horizontalPosition","verticalPosition","color","panelClass","providedIn","AuthComponent","selector","templateUrl","styleUrls","AuthModule","forChild","path","component","children","redirectTo","pathMatch","imports","declarations","ForgotPasswordComponent","router","snackBarService","cdr","breakpointObserver","email","load","done","observe","subscribe","state","matches","isOnPhoneWidth","markForCheck","LoginComponent","authService","hide","user","password","loadSnackUndo","login","res","console","log","setToken","jwt","setUserDatas","location","reload","err","RegisterComponent","registerDone","gender_balise","country_balise","confirmPAssword","username","register","navigateByUrl"],"mappings":"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","file":"components-pages-auth-auth-module-es5.js","sourcesContent":["export class User {\n    username: string;\n    email: string;\n    password: string;\n}\n","import { Injectable } from '@angular/core';\n\nimport {\n  MatSnackBar,\n  MatSnackBarHorizontalPosition,\n  MatSnackBarVerticalPosition,\n} from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SnackbarService {\n\n  snack_class = {\n    success: 'green-snackbar',\n    warn: 'warn-snackbar',\n    danger: 'red-snackbar'\n  }\n\n  constructor(\n    private _snackBar: MatSnackBar) { }\n\n  loadSnack(msg:string, closeMsg:string, duration:number) {\n    this._snackBar.open(msg, closeMsg, {\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n    });\n  }\n\n  loadSnackUndo(msg:string, closeMsg:string, duration:number, color:string) {\n    this._snackBar.open(msg, closeMsg, {\n      horizontalPosition: 'right',\n      verticalPosition: 'top',\n      duration: duration,\n      //@ts-ignore\n      panelClass: this.snack_class[color]\n    });\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.scss']\n})\nexport class AuthComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<app-header-one></app-header-one>\n\n<router-outlet></router-outlet>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AuthComponent } from './auth.component';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { RouterModule } from '@angular/router';\nimport { LayoutsModule } from '../../layouts/layouts.module';\n\nimport { MaterialModule } from '../../core/modules/material.module';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    LayoutsModule,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatFormFieldModule,\n    MatInputModule, MatIconModule,\n    MatAutocompleteModule,\n    RouterModule.forChild(\n        [\n            {\n                path: '',\n                component: AuthComponent,\n                children: [\n                    {\n                        path: '',\n                        redirectTo: 'login',\n                        pathMatch: 'full'\n                    },\n                    {\n                        path: 'login',\n                        component: LoginComponent\n                    },\n                    {\n                        path: 'register',\n                        component: RegisterComponent\n                    },\n                    {\n                        path: 'forgot-password',\n                        component: ForgotPasswordComponent\n                    }\n                ]\n            }\n        ]\n    )\n  ],\n  declarations: [\n      AuthComponent,\n      LoginComponent,\n      RegisterComponent,\n      ForgotPasswordComponent\n    ]\n})\nexport class AuthModule { }\n","import { BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\nimport { ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { SnackbarService } from 'src/app/components/core/services/snackbar.service';\n\n@Component({\n    selector: 'app-forgot-password',\n    templateUrl: './forgot-password.component.html',\n    styleUrls: ['./forgot-password.component.scss']\n  })\n  export class ForgotPasswordComponent implements OnInit {\n\n  email = '';\n  load = false;\n  done = false;\n\n  //@ts-ignore\n  isOnPhoneWidth: boolean;\n\n  constructor(\n    private router: Router,\n    private snackBarService: SnackbarService,\n    private cdr: ChangeDetectorRef,\n    public breakpointObserver: BreakpointObserver,\n  ) { }\n\n  ngOnInit(): void {\n\n    this.breakpointObserver\n      .observe(['(min-width: 900px)'])\n      .subscribe((state: BreakpointState) => {\n        if (state.matches) {\n          this.isOnPhoneWidth = false;\n          // console.log('Viewport width is 600px or greater!');\n        } else {\n          this.isOnPhoneWidth = true;\n          // console.log('Viewport width is less than 600px!');\n        }\n\n        this.cdr.markForCheck()\n      });\n\n  }\n\n  submit() {\n\n    this.load = true;\n\n    // this.authService.forgot_password(this.email).subscribe(\n    //   (res:any) => {\n    //     if(res.success) {\n    //       this.done = true;\n    //     }\n    //   },\n    //   (err:any) => {\n    //     this.snackBarService.loadSnackUndo('Une erreur est survenue, veuillez réessayer', 'x', 3000, 'warn')\n    //   },\n    //   () => {\n    //     this.load = false;\n    //   }\n    // )\n\n  }\n\n}\n","\n<div *ngIf=\"!isOnPhoneWidth\" class=\"new_auth_wrapper __row\">\n\n    <div class=\"col-md-7 col-12 new_wrapper_form\">\n\n      <h2 class=\"title\" >Mot de Passe Oublié</h2>\n\n      <div *ngIf=\"!done\" class=\"form-group row\" style=\"margin-top: 2em;\">\n\n        <div class=\"col-12\">\n\n          <h4 style=\"text-align: center;\" >Veuilez entrer votre email</h4>\n\n          <mat-form-field class=\"width_100\" appearance=\"standard\">\n            <mat-label>Email</mat-label>\n            <input matInput [(ngModel)]=\"email\" name=\"email\" type=\"email\" placeholder=\"Ex. exemaple@gmail.com\">\n          </mat-form-field>\n        </div>\n\n        <div class=\"form_input\"\n          type=\"submit\">\n          <button\n            (click)=\"submit()\"\n            type=\"submit\" >\n            <span *ngIf=\"!load\">Valider</span>\n            <div *ngIf=\"load\" style=\"margin-top: 5px;\" class=\"spinner-border text-light\" role=\"status\">\n              <span class=\"sr-only\">Loading...</span>\n            </div>\n          </button>\n        </div>\n\n        <!-- <h4 class=\"last_msg\" >Vous n’avez pas encore de compte ? <a routerLink=\"/auth/register\" >Cliquez ici !</a> </h4> -->\n\n      </div>\n\n      <div *ngIf=\"done\" class=\"form-group row\" style=\"margin-top: 2em;\">\n\n        <div class=\"col-12\">\n\n          <h4 style=\"text-align: center;\" class=\"text-danger\" >Veuilez Consulter votre mail pour continuer la procédure afin de créer votre nouveau mot de passe.</h4>\n\n        </div>\n\n      </div>\n\n    </div>\n\n    <div class=\"col-md-5 col-12 info\">\n\n      <div class=\"logo_content row\">\n\n        <img src=\"../../../../../assets/images/logo_ hub_csu.jpg\" alt=\"\">\n\n      </div>\n\n      <h2 class=\"title\">Vous avez déjà un compte ?</h2>\n\n      <h3>Connectez vous pour contribuer</h3>\n\n      <div class=\"row\">\n\n        <a routerLink=\"/auth/login\" class=\"btn scu-btn\">Se connecter</a>\n\n      </div>\n\n    </div>\n\n  </div>\n\n  <div *ngIf=\"isOnPhoneWidth\" class=\"new_auth_wrapper row\">\n\n    <div class=\"col-12 info\" style=\"padding-bottom: 2em; padding-top: 3em\">\n\n      <div class=\"logo_content row\">\n\n        <img src=\"../../../../../assets/images/logo_ hub_csu.jpg\" alt=\"\">\n\n      </div>\n\n      <h2 class=\"title\">Vous avez déjà un compte ?</h2>\n\n      <h3>Connectez vous pour contribuer</h3>\n\n      <div class=\"row\">\n\n        <a routerLink=\"/auth/login\" class=\"btn scu-btn\">Se connecter</a>\n\n      </div>\n\n    </div>\n\n    <div class=\"col-12 new_wrapper_form\">\n\n      <h2 class=\"title\" >Mot de Passe Oublié</h2>\n\n      <div *ngIf=\"!done\" class=\"form-group row\" style=\"margin-top: 2em;\">\n\n        <div class=\"col-12\">\n\n          <h4 style=\"text-align: center;\" >Veuilez entrer votre email</h4>\n\n          <mat-form-field class=\"width_100\" appearance=\"standard\">\n            <mat-label>Email</mat-label>\n            <input matInput [(ngModel)]=\"email\" name=\"email\" type=\"email\" placeholder=\"Ex. exemaple@gmail.com\">\n          </mat-form-field>\n        </div>\n\n        <div class=\"form_input\"\n          type=\"submit\">\n          <button\n            (click)=\"submit()\"\n            type=\"submit\" >\n            <span *ngIf=\"!load\">Valider</span>\n            <div *ngIf=\"load\" style=\"margin-top: 5px;\" class=\"spinner-border text-light\" role=\"status\">\n              <span class=\"sr-only\">Loading...</span>\n            </div>\n          </button>\n        </div>\n\n        <!-- <h4 class=\"last_msg\" >Vous n’avez pas encore de compte ? <a routerLink=\"/auth/register\" >Cliquez ici !</a> </h4> -->\n\n      </div>\n\n      <div *ngIf=\"done\" class=\"form-group row\" style=\"margin-top: 2em;\">\n\n        <div class=\"col-12\">\n\n          <h4 style=\"text-align: center;\" class=\"text-danger\" >Veuilez Consulter votre mail pour continuer la procédure afin de créer votre nouveau mot de passe.</h4>\n\n        </div>\n\n      </div>\n\n    </div>\n\n  </div>\n","import { BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\nimport { ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/components/core/services/auth.service';\nimport { SnackbarService } from 'src/app/components/core/services/snackbar.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  hide = true;\n  load = false;\n  user = {\n      email: '',\n      password: ''\n  };\n\n  //@ts-ignore\n  isOnPhoneWidth: boolean;\n\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private authService: AuthService,\n    private snackBarService: SnackbarService,\n    public breakpointObserver: BreakpointObserver,) { }\n\n  ngOnInit(): void {\n\n\n    this.breakpointObserver\n    .observe(['(min-width: 900px)'])\n    .subscribe((state: BreakpointState) => {\n      if (state.matches) {\n        this.isOnPhoneWidth = false;\n        // console.log('Viewport width is 600px or greater!');\n      } else {\n        this.isOnPhoneWidth = true;\n        // console.log('Viewport width is less than 600px!');\n      }\n\n      this.cdr.markForCheck()\n    });\n\n  }\n\n  submit() {\n\n    if(!this.user.email) {\n      this.snackBarService.loadSnackUndo('Veuillez rentrer votre Email', 'x', 3000, 'warn')\n      return;\n    }\n\n    if(!this.user.password) {\n      this.snackBarService.loadSnackUndo('Veuillez rentrer votre Mot de passe', 'x', 3000, 'warn')\n      return;\n    }\n\n    this.load = true;\n\n    this.authService.login(this.user.email, this.user.password).subscribe(\n        (res:any) => {\n            console.log(res);\n            this.authService.setToken(res.jwt);\n            this.authService.setUserDatas(res.user);\n            location.reload();\n        },\n        (err:any) => {\n\n        },\n        () => {\n\n        }\n    )\n\n  }\n\n}\n","<div *ngIf=\"!isOnPhoneWidth\" class=\"new_auth_wrapper __row\">\n\n    <div class=\"col-7 new_wrapper_form\">\n\n      <h2 class=\"title\" >Vous connecter</h2>\n\n      <div class=\"form-group\" style=\"margin-top: 2em;\">\n\n        <div class=\"col-12\">\n          <mat-form-field class=\"width_100\" appearance=\"standard\">\n            <mat-label>Email</mat-label>\n            <input matInput [(ngModel)]=\"user.email\" name=\"email\"  type=\"email\" placeholder=\"Ex. exemple@gmail.com\">\n          </mat-form-field>\n        </div>\n\n        <div class=\"col-12\">\n          <mat-form-field class=\"width_100\" appearance=\"standard\">\n            <mat-label>Mot de Passe</mat-label>\n            <input matInput [(ngModel)]=\"user.password\" name=\"password\" [type]=\"hide ? 'password' : 'text'\">\n\n            <mat-icon matSuffix color=\"primary\" class=\"btn\" (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n          </mat-form-field>\n        </div>\n\n        <h4 class=\"forgot_password\">\n          <a routerLink=\"/auth/forgot-password\"  >Mot de passe oublié ?</a>\n        </h4>\n\n        <div class=\"form_input\"\n          type=\"submit\">\n          <button (click)=\"submit()\"   >\n            <span *ngIf=\"!load\">Se connecter</span>\n            <div *ngIf=\"load\" style=\"margin-top: 5px;\" class=\"spinner-border text-light\" role=\"status\">\n              <span class=\"sr-only\">Loading...</span>\n            </div>\n          </button>\n        </div>\n\n        <!-- <h4 class=\"last_msg\" >Vous n’avez pas encore de compte ? <a routerLink=\"/auth/register\" >Cliquez ici !</a> </h4> -->\n\n      </div>\n\n    </div>\n\n    <div class=\"col-5 info\">\n\n      <div class=\"logo_content row\">\n\n        <img src=\"../../../../../assets/images/logo_2-removebg-preview.png\" alt=\"\">\n\n      </div>\n\n      <h2 class=\"title\">Nouveau</h2>\n\n      <h3>Inscrivez vous pour contribuer au hub\n        du CSU</h3>\n\n      <div class=\"row\">\n\n        <a routerLink=\"/auth/register\" class=\"btn scu-btn\"> S'inscrire Ici.</a>\n\n      </div>\n\n    </div>\n\n  </div>\n\n  <div *ngIf=\"isOnPhoneWidth\" class=\"new_auth_wrapper row\">\n\n    <div class=\"col-12 new_wrapper_form\">\n\n      <h2 class=\"title\" >Vous connecter</h2>\n\n      <div class=\"form-group\" style=\"margin-top: 2em;\">\n\n        <div class=\"col-12\">\n          <mat-form-field class=\"width_100\" appearance=\"standard\">\n            <mat-label>Email</mat-label>\n            <input matInput [(ngModel)]=\"user.email\" name=\"email\"  type=\"email\" placeholder=\"Ex. exemple@gmail.com\">\n          </mat-form-field>\n        </div>\n\n        <div class=\"col-12\">\n          <mat-form-field class=\"width_100\" appearance=\"standard\">\n            <mat-label>Mot de Passe</mat-label>\n            <input matInput [(ngModel)]=\"user.password\" name=\"password\" [type]=\"hide ? 'password' : 'text'\">\n\n            <mat-icon matSuffix color=\"primary\" class=\"btn\" (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n          </mat-form-field>\n        </div>\n\n        <h4 class=\"forgot_password\">\n          <a routerLink=\"/auth/forgot-password\"  >Mot de passe oublié ?</a>\n        </h4>\n\n        <div class=\"form_input\"\n          type=\"submit\">\n          <button (click)=\"submit()\"   >\n            <span *ngIf=\"!load\">Se connecter</span>\n            <div *ngIf=\"load\" style=\"margin-top: 5px;\" class=\"spinner-border text-light\" role=\"status\">\n              <span class=\"sr-only\">Loading...</span>\n            </div>\n          </button>\n        </div>\n\n        <h4 class=\"last_msg\" >Vous n’avez pas encore de compte ? <a routerLink=\"/auth/register\" >Cliquez ici !</a> </h4>\n\n      </div>\n\n    </div>\n\n  </div>\n","import { BreakpointObserver, BreakpointState } from '@angular/cdk/layout';\nimport { ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { User } from 'src/app/components/core/models/user';\nimport { AuthService } from 'src/app/components/core/services/auth.service';\nimport { SnackbarService } from 'src/app/components/core/services/snackbar.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n    hide = true;\n    user = new User()\n    load = false;\n    registerDone = false;\n\n    gender_balise = false;\n    country_balise = false;\n\n    confirmPAssword = ''\n\n    //@ts-ignore\n    isOnPhoneWidth: boolean;\n\n  constructor(\n    private cdr: ChangeDetectorRef,\n    private authService: AuthService,\n    private snackBarService: SnackbarService,\n    public breakpointObserver: BreakpointObserver,\n      private router: Router\n  ) { }\n\n  ngOnInit(): void {\n\n    this.breakpointObserver\n    .observe(['(min-width: 900px)'])\n    .subscribe((state: BreakpointState) => {\n      if (state.matches) {\n        this.isOnPhoneWidth = false;\n        // console.log('Viewport width is 600px or greater!');\n      } else {\n        this.isOnPhoneWidth = true;\n        // console.log('Viewport width is less than 600px!');\n      }\n\n      this.cdr.markForCheck()\n    });\n\n  }\n\n  submit() {\n\n    if(!this.user.username) {\n      this.snackBarService.loadSnackUndo('Veuillez rentrer votre Nom d\\'utilisateur', 'x', 3000, 'warn')\n      return;\n    }\n\n    if(!this.user.email) {\n      this.snackBarService.loadSnackUndo('Veuillez rentrer votre Email', 'x', 3000, 'warn')\n      return;\n    }\n\n    if(!this.user.password) {\n      this.snackBarService.loadSnackUndo('Veuillez rentrer votre Mot de passe', 'x', 3000, 'warn')\n      return;\n    }\n\n    this.load = true;\n\n    this.authService.register(this.user).subscribe(\n        (res:any) => {\n            // console.log(res);\n            this.router.navigateByUrl('/auth/login');\n        },\n        (err:any) => {\n\n        },\n        () => {\n\n        }\n    )\n\n  }\n\n}\n","<div *ngIf=\"!isOnPhoneWidth\" class=\"new_auth_wrapper __row\">\n\n    <div class=\"col-md-7 col-12 new_wrapper_form\">\n\n      <h2 class=\"title\" >Création de Compte</h2>\n\n      <h4 *ngIf=\"registerDone\">\n        Votre compte a été bien créer, veuillez consulter votre boite mail pour valider votre compte.\n        Ou, vous pouvez vous <a routerLink=\"/auth/login\">connecter</a> directement.\n      </h4>\n\n      <div *ngIf=\"!registerDone\" class=\"form-group row\" style=\"margin-top: 2em;\">\n\n        <div class=\"col-12\">\n          <mat-form-field class=\"width_100\" appearance=\"standard\">\n            <mat-label>Nom d'utilisateur</mat-label>\n            <input matInput [(ngModel)]=\"user.username\" name=\"firstName\" type=\"text\" placeholder=\"Ex. .\">\n          </mat-form-field>\n        </div>\n\n        <div class=\"col-12\">\n          <mat-form-field class=\"width_100\" appearance=\"standard\">\n            <mat-label>Email</mat-label>\n            <input matInput [(ngModel)]=\"user.email\" name=\"email\" type=\"email\" placeholder=\"Ex. exemaple@gmail.com\">\n          </mat-form-field>\n        </div>\n\n        <div class=\"col-6\">\n          <mat-form-field class=\"width_100\" appearance=\"standard\">\n            <mat-label>Mot de Passe</mat-label>\n            <input matInput [(ngModel)]=\"user.password\" name=\"password\"  [type]=\"hide ? 'password' : 'text'\">\n\n            <mat-icon matSuffix color=\"primary\" class=\"btn\" (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n          </mat-form-field>\n        </div>\n\n        <div class=\"col-6\">\n          <mat-form-field class=\"width_100\" appearance=\"standard\">\n            <mat-label>Confirmer Mot de Passe</mat-label>\n            <input matInput [(ngModel)]=\"confirmPAssword\" name=\"confirmPAssword\" [type]=\"hide ? 'password' : 'text'\">\n\n            <mat-icon matSuffix color=\"primary\" class=\"btn\" (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n          </mat-form-field>\n        </div>\n\n        <!-- <h4 class=\"forgot_password\">\n          <a routerLink=\"/auth/forgot-password\"  >Mot de passe oublié ?</a>\n        </h4> -->\n\n        <div class=\"form_input\"\n          type=\"submit\">\n          <button\n            (click)=\"submit()\"\n            type=\"submit\" >\n            <span *ngIf=\"!load\">Créer un compte</span>\n            <div *ngIf=\"load\" style=\"margin-top: 5px;\" class=\"spinner-border text-light\" role=\"status\">\n              <span class=\"sr-only\">Loading...</span>\n            </div>\n          </button>\n        </div>\n\n        <!-- <h4 class=\"last_msg\" >Vous n’avez pas encore de compte ? <a routerLink=\"/auth/register\" >Cliquez ici !</a> </h4> -->\n\n      </div>\n\n    </div>\n\n    <div class=\"col-md-5 col-12 info\">\n\n      <div class=\"logo_content row\">\n\n        <img src=\"../../../../../assets/images/logo_2-removebg-preview.png\" alt=\"\">\n\n      </div>\n\n      <h2 class=\"title\">Vous avez déjà un compte ?</h2>\n\n      <h3>Connectez vous pour contribuer</h3>\n\n      <div class=\"row\">\n\n        <a routerLink=\"/auth/login\" class=\"btn scu-btn\">Se connecter</a>\n\n      </div>\n\n    </div>\n\n  </div>\n\n\n  <div *ngIf=\"isOnPhoneWidth\" class=\"new_auth_wrapper row\">\n\n    <div class=\"col-12 new_wrapper_form\">\n\n      <h2 class=\"title\" >Création de Compte</h2>\n\n      <h4 *ngIf=\"registerDone\">\n        Votre compte a été bien créer, veuillez consulter votre boite mail pour valider votre compte.\n        Ou, vous pouvez vous <a routerLink=\"/auth/login\">connecter</a> directement.\n      </h4>\n\n      <div *ngIf=\"!registerDone\" class=\"form-group row\" style=\"margin-top: 2em;\">\n\n        <div class=\"col-12\">\n          <mat-form-field class=\"width_100\" appearance=\"standard\">\n            <mat-label>Nom d'utilisateur</mat-label>\n            <input matInput [(ngModel)]=\"user.username\" name=\"firstName\" type=\"text\" placeholder=\"Ex. .\">\n          </mat-form-field>\n        </div>\n\n        <div class=\"col-12\">\n          <mat-form-field class=\"width_100\" appearance=\"standard\">\n            <mat-label>Email</mat-label>\n            <input matInput [(ngModel)]=\"user.email\" name=\"email\" type=\"email\" placeholder=\"Ex. exemaple@gmail.com\">\n          </mat-form-field>\n        </div>\n\n        <div class=\"col-6\">\n          <mat-form-field class=\"width_100\" appearance=\"standard\">\n            <mat-label>Mot de Passe</mat-label>\n            <input matInput [(ngModel)]=\"user.password\" name=\"password\"  [type]=\"hide ? 'password' : 'text'\">\n\n            <mat-icon matSuffix color=\"primary\" class=\"btn\" (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n          </mat-form-field>\n        </div>\n\n        <div class=\"col-6\">\n          <mat-form-field class=\"width_100\" appearance=\"standard\">\n            <mat-label>Confirmer Mot de Passe</mat-label>\n            <input matInput [(ngModel)]=\"confirmPAssword\" name=\"confirmPAssword\" [type]=\"hide ? 'password' : 'text'\">\n\n            <mat-icon matSuffix color=\"primary\" class=\"btn\" (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n          </mat-form-field>\n        </div>\n\n        <!-- <h4 class=\"forgot_password\">\n          <a routerLink=\"/auth/forgot-password\"  >Mot de passe oublié ?</a>\n        </h4> -->\n\n        <div class=\"form_input\"\n          type=\"submit\">\n          <button\n            (click)=\"submit()\"\n            type=\"submit\" >\n            <span *ngIf=\"!load\">Créer un compte</span>\n            <div *ngIf=\"load\" style=\"margin-top: 5px;\" class=\"spinner-border text-light\" role=\"status\">\n              <span class=\"sr-only\">Loading...</span>\n            </div>\n          </button>\n        </div>\n\n        <h4 style=\"width: 100%;\" class=\"last_msg\" >Vous avez déja un compte ? <a routerLink=\"/auth/login\" >Cliquez ici !</a> </h4>\n\n      </div>\n\n    </div>\n\n  </div>\n"]}